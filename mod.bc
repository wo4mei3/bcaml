module type X = sig
  type t
end
(*
module U:functor (Z:X) -> functor(Y:X) -> sig
  val f : Z.t -> Y.t
end = functor(Z : X) -> functor(Y:X) -> struct
  let f x = x
end*)

module Y:X = struct
  type t = bool
  let x = false 
end

module type Y = sig
  type t = int
end

module type Z = sig
  type t
  val f: t -> t
end

module W:Z = struct
  type t = int
  let f x = x
end



module type A = sig
  type 'a t 
  val x: 'a t
end

module B:A = struct
  type 'a t = 'a list
  let x = []
end

module type C = sig
  type 'a t 
  val x: 'a t
end

module D:C = struct
  type 'a t = 'a list
  let x = 1::[]
end

module type E = sig
  type t 
  val x: t
end

module F:E = struct
  type t = int list
  let x = 1::[]
end

module Y:Y = struct
  type t = int
end

module type S = sig
  type t
  val v : t
  val f : t -> t
end

module F = functor (X : S) -> functor (Y : S) -> struct
  let w = Y.f X.v
end

module type T = S with type t = int
(*
module Bool = struct
  type t = bool
  let v = false
  let f b = true
end

module Int = struct
  type t = int
  let v = 30
  let f x = x + 1
end

module M : sig val w : int end = F Bool Int*)
module type S = sig 
  type t 
end

(*
module M:
functor(M1 :S)-> 
  functor(M2:S)-> 
    sig 
      val f:M1.t->M2.t 
    end
=
functor(M1 :S)-> 
  functor(M2:S)->
    struct 
      let f x= x
    end
*)